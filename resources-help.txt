Working with React

#. Installing Node JS
-------------------------
> npm install -g create-react-app
> create-react-app <project name>
OR 
> npx create-react-app <project name>
Note:- run one command instead of 2 (applicable for new versions only - npm > 5)

create-react-app has => webpack + babel + dev server

#. Codepen
--------
https://codepen.io/sanjaybh/pen/BaaPRqa


#. Resources used in the app development
---------------------------------------
https://semantic-ui.com
https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css

Install faker to make fake data for the application
https://github.com/marak/Faker.js/


#. Seasons
Geolocation API
developer.mozilla.org/en-US/docs/Web/API/Geolocation_API


#. Explore this tag
<script type="text/babel" data-presets="env,react">


#. Controlled vs un-controlled elements
context and event handlers

//online editor
stephengrider.github.io/playgrounds

//Grap pictures from a free source
https://unsplash.com/developers

#. fetch (function built into modern browsers) vs axios (3rd party package)

#. React Refs

#. Redux example explained with insurance company
------------------------------------------------
1. Action Creator (person dropping off the form)
2. Action (the form)
3. Dispatch (form receiver)
4. Reducers (Departments)
5. State (compiled department data)

Redux explained in below example
/src/redux-help/example.js
https://codepen.io/sanjaybh/pen/QWWYOmR?editors=0010

#. Start new app with -> create-react-app songs
add https://semantic-ui.com
 (reference - Video 142)
 
Store
    - Provider
    - app
    - connect
    - SongList

// React-redux - Provider and Connect
1. Redux does not automatically detect action creators being called
2. Redux does not automatically detect function returning an object that is an 'action'

Action Creators must return an action object
    -Select Songs

# blog
react-thunk - required for asynchronous action creators (video 164)

Redux Cycle
-------------
-> Action creator (to change state of our app we call ) 
-> action (produces an) 
-> Dispatch (forwards action to) 
-> Middleware (sends actions to) 
-> Reducers (creates new) 
-> State (wait until we need to update state again)

Middleware in Redux
--------------------
function that gets called with every action we Dispatch
Has the ability to STOP, MODIFY or otherwise mess around with actions
Tons of open source middleware exist
Most popular use of middleware is for dealing with async actions
We are going to use a middleware called 'Redux-thunk' to solde our async issues

NOte - Action creator passing something to dispatch, it passes "something" to middleware (enters to thunk), it means
thunk will ask only one question to that something.
are you object or function ?
if Obj then it will pass it along to reducers
but in case of function thunk will take care of (invokes dispatch by passing 2 args, dispatch and getState)
Thunk will invoke 2 arguments, fun(dispatch and getState)
that gives unlimited power over redux store, while function gets received from action 
function invoked with dispatch then we will wait for our request to finish
request complete dispatch action manually. (new action will be dispatched as a plain object)

github.com/reduxjs/redux-thunk
github.com/reduxjs/redux

#. Lodash library
https://lodash.com/docs/4.17.15



